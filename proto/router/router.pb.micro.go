// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: router.proto

package router

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Router service

func NewRouterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Router service

type RouterService interface {
	// 对外提供添加服务
	AddRouter(ctx context.Context, in *RouterInfo, opts ...client.CallOption) (*Response, error)
	DeleteRouter(ctx context.Context, in *RouterId, opts ...client.CallOption) (*Response, error)
	UpdateRouter(ctx context.Context, in *RouterInfo, opts ...client.CallOption) (*Response, error)
	FindRouterByID(ctx context.Context, in *RouterId, opts ...client.CallOption) (*RouterInfo, error)
	FindAllRouter(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllRouter, error)
}

type routerService struct {
	c    client.Client
	name string
}

func NewRouterService(name string, c client.Client) RouterService {
	return &routerService{
		c:    c,
		name: name,
	}
}

func (c *routerService) AddRouter(ctx context.Context, in *RouterInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Router.AddRouter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerService) DeleteRouter(ctx context.Context, in *RouterId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Router.DeleteRouter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerService) UpdateRouter(ctx context.Context, in *RouterInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Router.UpdateRouter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerService) FindRouterByID(ctx context.Context, in *RouterId, opts ...client.CallOption) (*RouterInfo, error) {
	req := c.c.NewRequest(c.name, "Router.FindRouterByID", in)
	out := new(RouterInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerService) FindAllRouter(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllRouter, error) {
	req := c.c.NewRequest(c.name, "Router.FindAllRouter", in)
	out := new(AllRouter)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterHandler interface {
	// 对外提供添加服务
	AddRouter(context.Context, *RouterInfo, *Response) error
	DeleteRouter(context.Context, *RouterId, *Response) error
	UpdateRouter(context.Context, *RouterInfo, *Response) error
	FindRouterByID(context.Context, *RouterId, *RouterInfo) error
	FindAllRouter(context.Context, *FindAll, *AllRouter) error
}

func RegisterRouterHandler(s server.Server, hdlr RouterHandler, opts ...server.HandlerOption) error {
	type router interface {
		AddRouter(ctx context.Context, in *RouterInfo, out *Response) error
		DeleteRouter(ctx context.Context, in *RouterId, out *Response) error
		UpdateRouter(ctx context.Context, in *RouterInfo, out *Response) error
		FindRouterByID(ctx context.Context, in *RouterId, out *RouterInfo) error
		FindAllRouter(ctx context.Context, in *FindAll, out *AllRouter) error
	}
	type Router struct {
		router
	}
	h := &routerHandler{hdlr}
	return s.Handle(s.NewHandler(&Router{h}, opts...))
}

type routerHandler struct {
	RouterHandler
}

func (h *routerHandler) AddRouter(ctx context.Context, in *RouterInfo, out *Response) error {
	return h.RouterHandler.AddRouter(ctx, in, out)
}

func (h *routerHandler) DeleteRouter(ctx context.Context, in *RouterId, out *Response) error {
	return h.RouterHandler.DeleteRouter(ctx, in, out)
}

func (h *routerHandler) UpdateRouter(ctx context.Context, in *RouterInfo, out *Response) error {
	return h.RouterHandler.UpdateRouter(ctx, in, out)
}

func (h *routerHandler) FindRouterByID(ctx context.Context, in *RouterId, out *RouterInfo) error {
	return h.RouterHandler.FindRouterByID(ctx, in, out)
}

func (h *routerHandler) FindAllRouter(ctx context.Context, in *FindAll, out *AllRouter) error {
	return h.RouterHandler.FindAllRouter(ctx, in, out)
}
